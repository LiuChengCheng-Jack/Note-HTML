1. js 有一些关键字和保留字，要注意定义标识符的时候不能使用

2. js 五种基本的数据类型 Null Undefined Boolean Number String,一种复杂的数据类型 Object
   
   typeof 操作符   六种结果 undefined boolean number string object function
   注意区分object和function 是很有必要的。

Undfied:未初始化的变量被定义为undefined，对于尚未定义的变量，只能用typeof 操作符检测其数据类型 
Null: 如果定义的变量准备用于保存对象，那么最好将其初始化为null
Boolean: 将一个转换为对应的Boolean值，可以调用函数Boolean 
Number: 分整数和浮点数两种，整数：Number.MIN_VALUE Number_MAXVALUE  判断一个数是否介于最小值和最大值之间，使  用isFinite() 函数 
  NaN:非数值 NaN 与任何值均不相等，包括其本身，isNaN():任何不能被转换为树枝的值都会返回  true
  数值转换：Number() parseInt():可以指定基数，例如parseInt("0xAf",16)     parseFloat():十六进制数均会被转成0 
String: 16为unicode 字符表示的字符序列 ""  ''均可  转义字符 \xnn  \unnnn(一个unicode字符)  
     转换为字符串： toString() String():比第一个函数可以处理null和undefined 
Object类型： 包含一些基本的函数

3. 操作符

一元操作符：前,后++ 前,后-- 对任何值均适用 可用于字符串，布尔值，浮点数值和对象
            一元加和减操作符 var number=24; number=+number number=-number

位操作符：注意~25=-26（按位非操作的本质：操作数的负值减1）  -25=-25
          not(~) and(&) oR(|) 异或（^）  左移（<<）有符号的右移（>>）无符号右移（>>>）

布尔操作符：！ &&  ||

相等操作符： == !=(这两个会对操作数进行类型转换)  ===（全等）!==(全不等)，这两个会得到不进行类型转换的结果

4.语句 for-in语句 for（var prop in window）{}//顺序不固定

 label语句,一般与for等循环语句配合使用  with语句（不建议使用） switch语句在比较的时候用的是全等操作符 

5. 函数 function()
可以通过arguments对象访问函数的参数 arguments[n]
 所有的参数传递均为值传递，不可能通过引用传递参数 函数不能重载

第二章: 变量，作用域，内存问题

1.基本数据类型（Undefined Null Boolean Number String）引用数据类型（对象）
  只能给引用类型值动态的改变属性 所有的函数都是按值传递的（包括传递一个对象值）
  检测类型 typeof() 变量的值是一个对象或者为null,返回object  typeof 一个正则表达式在不同的浏览器下返回值不同
   a instanceof A 检测a是否为A类的应用类型
2.没有块级作用域
3.垃圾收集

第五章：引用类型

1. 创建object实例的方法
   var a=new Object(); s.name="dd";     (2) var person={name:"ssss",age:25};//对象字面量表示法，可以再传递函数参数时使用
  访问对象属性 person.name person["name"](一般括号里面的值用一个变量进行表示)
2.Array类型：
 两种定义方法 var b=new Array();  (2) var c=[1,"dd","ddd"]; c[c.length]="ff";
确定一个对象是否为数组 value instanceof Array  (新版) Array.isArray(value),部分浏览器支持
(3)转化方法： toLocalString() toString() valueOf()
 join()将数组连成字符串，并用指定的分隔符 colors.join("||");
(4) 栈方法： push() 和pop()方法
(5)队列方法：push()与shift()方法 unshift()向顶端填充数据 与 pop()组成相反方向的队列
(6)重新排序方法 reverse() 顺序反转   sort()或 sort(某个函数名)，调用函数会比较正确 函数均返回排好序的数组  
(7)操作方法：concat()添加,返回一个数组 slice() 截取部分内容 splice()删除并追加某些内容
(8)位置方法：寻找某个值在数组中的位置，indexof(2)从前往后 lastIndexof(2)从后往前找 可以指定索引的起始位置，第二个参数设定起始位置
(9)迭代方式 var number=[1,2,3,4,5,6,7]; number.every(function(item,index,array){});其他函数与第一个函数的参数类似 some() 与every()两者的返回值是一个boolean值  filter()将满足条件的过滤出来 map()对原始数组进行操作并返回更改后的数组 number.foreach()最常用，无返回值function(item,index,array)
(10)归并方式
  reduce()从数组的第一项开始 参数number.reduce(function(prev,cur,index,array){});
  reduceRight()从数组的最后一项开始


3.正则表达式对象

4. Function对象 
 函数名实际上是一个指向函数对象的指针  三种定义方法（1）函数声明  function sum(num1,num2){return num1+num2;} (2)函数表达式 var sum=function(sum1,sum2){return sum1+sum2;}; 注意最后要有一个逗号结束 (3)使用Function构造函数 最后一个参数是函数体 var sum=new Function("","","return num1+num2");
  函数是没有重载的 一个函数可以作为另一个函数的结果返回

  函数的内部属性 arguments(类数组对象 有一个属性 callee 指向拥有这个arguments 对象的函数) 和this（引用的是函数的执行环境，不同的函数调用执行不同的结果）
  另一个函数对象的指针 caller 保存着调用当前函数的引用，如果在全局作用域调用当前函数，则它的值为null  arguments.callee.caller可以减少耦合程度
  
  函数属性与方法 length()参数的个数 prototype
  每个函数包含两个非继承而来的方法 apply() call() 
  bind（)方法，可以创建一个一个函数的实例
5. 基本包装类型
  Boolean String Number
  


